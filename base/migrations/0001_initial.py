# Generated by Django 4.2.16 on 2024-10-14 19:05

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdministrativeStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('surname', models.CharField(blank=True, max_length=255, null=True)),
                ('patronymic', models.CharField(blank=True, max_length=255, null=True)),
                ('age', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('work_experience', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staffs',
                'ordering': ['id', 'created', '-updated', 'age', 'work_experience'],
            },
        ),
        migrations.CreateModel(
            name='AdministrativeStaffType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Staff type',
                'verbose_name_plural': 'Staff types',
                'ordering': ['id', 'created', '-updated'],
            },
        ),
        migrations.CreateModel(
            name='AgeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Age category',
                'verbose_name_plural': 'Age categories',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='Arena',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('street', models.CharField(blank=True, max_length=255, null=True)),
                ('places_count', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Arena',
                'verbose_name_plural': 'Arenas',
                'ordering': ['id', 'created', '-updated', 'places_count'],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='BreedingServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Breeding service type',
                'verbose_name_plural': 'Breeding service types',
                'ordering': ['id', 'created', '-updated'],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('date', models.DateField(auto_now=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='ClothesType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Clothes type',
                'verbose_name_plural': 'Clothes types',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='CoachStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('surname', models.CharField(blank=True, max_length=255, null=True)),
                ('patronymic', models.CharField(blank=True, max_length=255, null=True)),
                ('age', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('work_experience', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Coach staff',
                'verbose_name_plural': 'Coach staff',
                'ordering': ['id', 'created', '-updated', 'age', 'work_experience'],
            },
        ),
        migrations.CreateModel(
            name='CoachStaffType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Coach staff type',
                'verbose_name_plural': 'Coach staff types',
                'ordering': ['id', 'created', '-updated'],
            },
        ),
        migrations.CreateModel(
            name='CoachSummaryStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('years', models.DateField(blank=True, null=True)),
                ('games', models.IntegerField(blank=True, null=True)),
                ('winnings', models.IntegerField(blank=True, null=True)),
                ('draws', models.IntegerField(blank=True, null=True)),
                ('defeats', models.IntegerField(blank=True, null=True)),
                ('point_scored', models.IntegerField(blank=True, null=True)),
                ('percentage_max_possible', models.FloatField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Coach summary statistics',
                'verbose_name_plural': 'Coaches summary statistics',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Color',
                'verbose_name_plural': 'Colors',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='DirectorType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Director type',
                'verbose_name_plural': 'Director types',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='Footballer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('surname', models.CharField(blank=True, max_length=255, null=True)),
                ('patronymic', models.CharField(blank=True, max_length=255, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Footballer',
                'verbose_name_plural': 'Footballers',
                'ordering': ['id', 'created', 'age', 'position'],
            },
        ),
        migrations.CreateModel(
            name='FootballerPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Footballer position',
                'verbose_name_plural': 'Footballer positions',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Gender',
                'verbose_name_plural': 'Genders',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='GeneralStatisticsAll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winnings', models.IntegerField(blank=True, null=True)),
                ('defeats', models.IntegerField(blank=True, null=True)),
                ('draws', models.IntegerField(blank=True, null=True)),
                ('goals_scored', models.IntegerField(blank=True, null=True)),
                ('goals_conceded', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'General statistics all',
                'verbose_name_plural': 'Generals statistics all',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='GeneralStatisticsTournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winnings', models.IntegerField(blank=True, null=True)),
                ('defeats', models.IntegerField(blank=True, null=True)),
                ('draws', models.IntegerField(blank=True, null=True)),
                ('goals_scored', models.IntegerField(blank=True, null=True)),
                ('goals_conceded', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'General statistics tournament',
                'verbose_name_plural': 'Generals statistics tournament',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='HeaderModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Header Link',
                'verbose_name_plural': 'Header Links',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tour', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('date', models.DateField(auto_now=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('arena', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.arena')),
            ],
            options={
                'verbose_name': 'Match',
                'verbose_name_plural': 'Matches',
                'ordering': ['id', 'created', '-updated', 'date'],
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Material',
                'verbose_name_plural': 'Materials',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('source', models.ImageField(blank=True, default='default.svg', null=True, upload_to='media')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Media',
                'verbose_name_plural': 'Media',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='NeutralField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matches', models.IntegerField(blank=True, null=True)),
                ('winnings', models.IntegerField(blank=True, null=True)),
                ('defeats', models.IntegerField(blank=True, null=True)),
                ('draws', models.IntegerField(blank=True, null=True)),
                ('goals_scored', models.IntegerField(blank=True, null=True)),
                ('goals_conceded', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Neutral field statistics',
                'verbose_name_plural': 'Neutral fields statistics',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('cover', models.ImageField(blank=True, default='item2.jpg', upload_to='news/covers')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'News',
                'verbose_name_plural': 'Newses',
                'ordering': ['id', 'created', '-updated'],
            },
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Outcome',
                'verbose_name_plural': 'Outcomes',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='OwnField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matches', models.IntegerField(blank=True, null=True)),
                ('winnings', models.IntegerField(blank=True, null=True)),
                ('defeats', models.IntegerField(blank=True, null=True)),
                ('draws', models.IntegerField(blank=True, null=True)),
                ('goals_scored', models.IntegerField(blank=True, null=True)),
                ('goals_conceded', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Own field statistics',
                'verbose_name_plural': 'Own fields statistics',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='PenaltyScored',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kicked', models.IntegerField(blank=True, null=True)),
                ('scored', models.IntegerField(blank=True, null=True)),
                ('earned_points', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Penalty Scored',
                'verbose_name_plural': "Penalty's Scored",
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Season',
                'verbose_name_plural': 'Seasons',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Size',
                'verbose_name_plural': 'Sizes',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='SomeoneField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matches', models.IntegerField(blank=True, null=True)),
                ('winnings', models.IntegerField(blank=True, null=True)),
                ('defeats', models.IntegerField(blank=True, null=True)),
                ('draws', models.IntegerField(blank=True, null=True)),
                ('goals_scored', models.IntegerField(blank=True, null=True)),
                ('goals_conceded', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Someone field statistics',
                'verbose_name_plural': 'Someone fields statistics',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='TicketPlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sector', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('place', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Ticket place',
                'verbose_name_plural': 'Ticket places',
                'ordering': ['id', 'created', '-updated', 'sector', 'place'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateField(auto_now=True, null=True)),
                ('end_date', models.DateField(auto_now=True, null=True)),
                ('tours', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('cities', models.ManyToManyField(blank=True, related_name='tournament_cities', to='base.city')),
                ('matches', models.ManyToManyField(blank=True, related_name='matches', to='base.match')),
            ],
            options={
                'verbose_name': 'Tournament',
                'verbose_name_plural': 'Tournaments',
                'ordering': ['id', 'created', '-updated', 'start_date', 'end_date', 'tours'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('date', models.DateTimeField(auto_now=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.match')),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.ticketplace')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'ordering': ['id', 'created', '-updated', 'price', 'date', 'place'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('administrative_staff', models.ManyToManyField(blank=True, related_name='team_staff', to='base.administrativestaff')),
                ('all_statistics', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.generalstatisticsall')),
                ('coach_staff', models.ManyToManyField(blank=True, related_name='team_coach_staff', to='base.coachstaff')),
                ('footballers', models.ManyToManyField(blank=True, related_name='team_footballers', to='base.footballer')),
                ('tournaments_statistics', models.ManyToManyField(blank=True, related_name='team_tournaments_statistics', to='base.generalstatisticstournament')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'ordering': ['id', 'created', '-updated'],
            },
        ),
        migrations.AddField(
            model_name='match',
            name='outcome',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.outcome'),
        ),
        migrations.AddField(
            model_name='match',
            name='teams',
            field=models.ManyToManyField(blank=True, related_name='match_teams', to='base.team'),
        ),
        migrations.CreateModel(
            name='GoalkeeperStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('years', models.DateField(auto_now=True, null=True)),
                ('games', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('goalkeeper', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='goalkeeper_id', to='base.footballer')),
            ],
            options={
                'verbose_name': 'Goalkeeper statistics',
                'verbose_name_plural': 'Goalkeepers statistics',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.AddField(
            model_name='generalstatisticstournament',
            name='own_field',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.ownfield'),
        ),
        migrations.AddField(
            model_name='generalstatisticstournament',
            name='someone_field',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.someonefield'),
        ),
        migrations.AddField(
            model_name='generalstatisticsall',
            name='neutral_field',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.neutralfield'),
        ),
        migrations.AddField(
            model_name='generalstatisticsall',
            name='own_field',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.ownfield'),
        ),
        migrations.AddField(
            model_name='generalstatisticsall',
            name='someone_field',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.someonefield'),
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('media', models.ManyToManyField(blank=True, related_name='gallery_midea', to='base.media')),
            ],
            options={
                'verbose_name': 'Gallery',
                'verbose_name_plural': 'Galleries',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.CreateModel(
            name='FootballerStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('years', models.DateField(auto_now=True, null=True)),
                ('matches', models.IntegerField(blank=True, null=True)),
                ('starting_lineup', models.IntegerField(blank=True, null=True)),
                ('came_substitute', models.IntegerField(blank=True, null=True)),
                ('been_replaced', models.IntegerField(blank=True, null=True)),
                ('goals', models.IntegerField(blank=True, null=True)),
                ('yellow_cards', models.IntegerField(blank=True, null=True)),
                ('red_cards', models.IntegerField(blank=True, null=True)),
                ('minutes_played', models.IntegerField(blank=True, null=True)),
                ('ball_selection', models.IntegerField(blank=True, null=True)),
                ('assists', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('penalties', models.ManyToManyField(blank=True, related_name='penalties_statistics', to='base.penaltyscored')),
            ],
            options={
                'verbose_name': 'Footballer statistics',
                'verbose_name_plural': 'Footballers statistics',
                'ordering': ['id', 'created'],
            },
        ),
        migrations.AddField(
            model_name='footballer',
            name='image',
            field=models.ManyToManyField(blank=True, related_name='footballer_images', to='base.media'),
        ),
        migrations.AddField(
            model_name='footballer',
            name='position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='footballer_position', to='base.footballerposition'),
        ),
        migrations.AddField(
            model_name='footballer',
            name='statistics',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.footballerstatistics'),
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('surname', models.CharField(blank=True, max_length=255, null=True)),
                ('patronymic', models.CharField(blank=True, max_length=255, null=True)),
                ('age', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('work_experience', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('type_director', models.ManyToManyField(blank=True, related_name='_director_type', to='base.directortype')),
            ],
            options={
                'verbose_name': 'Director',
                'verbose_name_plural': 'Directors',
                'ordering': ['id', 'created', '-updated', 'age', 'work_experience'],
            },
        ),
        migrations.AddField(
            model_name='coachstaff',
            name='statistics',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.coachsummarystatistics'),
        ),
        migrations.AddField(
            model_name='coachstaff',
            name='type_coach',
            field=models.ManyToManyField(blank=True, related_name='coach_staff_type', to='base.coachstafftype'),
        ),
        migrations.CreateModel(
            name='Clothes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('remaining_number', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('discount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('age_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.agecategory')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.brand')),
                ('color', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.color')),
                ('gender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.gender')),
                ('materials', models.ManyToManyField(blank=True, related_name='materials', to='base.material')),
                ('media_links', models.ManyToManyField(blank=True, related_name='clothes_media_links', to='base.media')),
                ('season', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.season')),
                ('size', models.ManyToManyField(blank=True, related_name='size', to='base.size')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.clothestype')),
            ],
            options={
                'verbose_name': 'Clothes',
                'verbose_name_plural': 'Clothes',
                'ordering': ['id', 'price', 'discount', '-updated'],
            },
        ),
        migrations.CreateModel(
            name='BreedingService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('surname', models.CharField(blank=True, max_length=255, null=True)),
                ('patronymic', models.CharField(blank=True, max_length=255, null=True)),
                ('age', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('work_experience', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('type_service', models.ManyToManyField(blank=True, related_name='type', to='base.breedingservicetype')),
            ],
            options={
                'verbose_name': 'Breeding service',
                'verbose_name_plural': 'Breeding services',
                'ordering': ['id', 'created', '-updated', 'age', 'work_experience'],
            },
        ),
        migrations.AddField(
            model_name='administrativestaff',
            name='type_staff',
            field=models.ManyToManyField(blank=True, related_name='staff_type', to='base.administrativestafftype'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
                ('surname', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('login', models.CharField(blank=True, max_length=255, null=True)),
                ('avatar', models.ImageField(blank=True, default='assets/img/icons/avatar.svg', null=True, upload_to='avatars')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['id', 'created'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
